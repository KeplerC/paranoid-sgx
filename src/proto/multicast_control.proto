
syntax = "proto2";
package MulticastMessage;

//enum MessageType {
//  ERROR = 1;
//  JOIN = 2;
////LEAVE = 3,
//  ASSIGN_ID = 4;
////ASSIGN_PARENT = 5,
////ASSIGN_CHILD = 6,
//}

message ErrorMsg {
  optional int64 errorCode = 1;
}

message LeaveMsg {
  // TODO
}

message JoinMsg {
  optional string addr = 1;

  // Values are 0 for a client
  // and 1 for a router 
  optional int32 node_type = 2;
}

message AssignIdMsg {
  optional int64 newId = 1;
}

message AssignParentMsg {
  optional string parent = 1; 
}

message AssignChildMsg {
  // TODO
}

message ExecCodeMsg {
  optional string str = 1;
}

message RawStrMsg { // TODO temporary shim
  optional string str = 1;
}

message RawBytesMsg { // TODO temporary shim
  optional bytes bytestr = 1;
  optional bool route_up = 2;
  optional string interest_key = 3;
  optional string last_sender_addr = 4;
}

message AdvertiseKeyInterest {
  optional string interest_key = 1;
}


enum InterruptT {
  SEND_HEARTBEAT = 0;
  LISTEN_HEARTBEAT = 1;
  REBALANCE_TREE = 2;
}

message Heartbeat {
  optional string sender = 1;
  optional int32 subtree_size = 2;
}

message Cull {
  optional int count = 1;
}

message MessageBody {
  oneof msg {
    ErrorMsg error = 1;
    JoinMsg join = 2;
    AssignParentMsg assign_parent = 3;
    AssignIdMsg assignId = 4;
    InterruptT interrupt = 5;
    Heartbeat heartbeat = 6;
    Cull cull = 7;
    ExecCodeMsg code = 10;
    RawStrMsg raw_str = 11;
    RawBytesMsg raw_bytes = 12;
  }
}

message ControlMessage {
  optional MessageBody body = 1;
  optional int64 timestamp = 2;
  optional int64 sender_id = 3;
}
